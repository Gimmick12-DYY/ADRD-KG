version: '3.8'

# Production Docker Compose configuration
# Use this for production deployments with external database and Redis

services:
  # Django Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: adrd-backend-prod
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=adrd_kg.settings_production
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - USE_HTTPS=${USE_HTTPS:-False}
      - REDIS_URL=${REDIS_URL}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - adrd-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: adrd-frontend-prod
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - adrd-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Nginx Load Balancer (optional, for multiple backend instances)
  nginx:
    image: nginx:alpine
    container_name: adrd-nginx-lb
    ports:
      - "${LB_PORT:-443}:443"
      - "80:80"
    volumes:
      - ./nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - adrd-network
    restart: unless-stopped
    profiles:
      - load-balancer

networks:
  adrd-network:
    driver: bridge

volumes:
  static_volume:
    driver: local
  media_volume:
    driver: local
